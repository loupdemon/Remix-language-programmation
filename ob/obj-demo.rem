An Object Demo.

make person called (the-name) of age (years) :
	create
		name : the-name
		
		The following methods are explicit getters and setters.
		(my) name :
			name
		(my) name : (new-name) :
		; could also be
		; (my) name set (new-name) :
			name : new-name
			
		age : years
		(my) age :
			age

		say hi to (me) :
			show {"Hello ", name, ". "}
			showline {"You are ", age, " years old."}

		make (me) (how-many) years older :
			age : how-many + age

		hi to (me) and farewell with (farewell) :
			say hi to (me)
			showline (farewell)

		same (another) as (me) :
			showline {"This person is ", name}
			all of {
				[name = (another) name]
				[age = (another) age]
			}

person : make person called "Amy" of age 52

showline (person's name)
showline (person's age)

say hi to (person)

nl

make (person) 3 years older
person's name : "David"
say hi to (person)

nl

another : make person called "Pauline" of age 37
yet-another : based on (person) ; this still works
yet-another's name : "Stephen"

say hi to (another)
say hi to (person)
say hi to (yet-another)

nl

hi to (person) and farewell with "Time to go."
hi to (yet-another) and farewell with "See you later."

nl

showline (same (person) as (yet-another))
showline (same (yet-another) as (person))
yet-another's name : "David"
showline (same (person) as (yet-another))
showline (same (yet-another) as (person))
